- name: Create JIRA Home directory
  become: yes
  file:
    path: "{{ jira_home }}"
    state: directory
    owner: "{{ jira_user }}"
    group: "{{ jira_group }}"

- name: Update JIRA Home directory permissions
  become: yes
  file:
    path: "{{ jira_home }}"
    owner: "{{ jira_user }}"
    group: "{{ jira_group }}"
    mode: 0755
    #recurse: yes

- name: Mount JIRA Home Dir on EFS Volume
  become: yes
  mount:
    path: "{{ jira_home }}"
    src: "{{ jira_data_volume_id }}"
    fstype: efs
    opts: tls
    state: mounted

- name: "Find AWS Backup directory"
  find:
    paths: "{{ jira_home }}"
    recurse: no
    file_type: directory
    use_regex: no
    patterns: "aws-backup-restore_*"
  register: find_matches

- name: "print the path of our first result"
  debug:
    var: find_matches.files[0].path
  when: find_matches is defined

- name: "print the path of our first result"
  set_fact: aws_backup="{{ find_matches.files[0].path }}"
  when: find_matches is defined

- name: "check for dbconfig.xml in backup directory"
  stat:
    path: "{{ aws_backup }}/dbconfig.xml"
  register: test_file
  when: find_matches is defined

- name: "print the path of our first result"
  debug:
    var: test_file
  when: find_matches is defined

- name: Move back up to JIRA_HOME
  become: yes
  shell: "/usr/bin/mv --no-clobber {{ aws_backup }}/* {{ jira_home }}/"
  args:
    chdir: "{{ jira_home }}"
  when: find_matches is defined and test_file is defined and test_file.stat.exists

- name: ensure file exists to test next step
  copy:
    content: ""
    dest: "{{ aws_backup }}/stopfile"
    force: no
    owner: "{{ jira_user }}"
    group: "{{ jira_group }}"
    mode: 0755

- name: Check if Backup directory is empty before proceeding
  find:
    paths: "{{ aws_backup }}/"
  register: filesFound
  when: find_matches is defined

- debug:
    var: filesFound
  when: find_matches is defined

- debug:
    msg: 'The AWS Backup directory "{{ aws_backup }}" not empty.'
  when: filesFound.matched > 0

- debug:
    msg: 'The AWS Backup directory "{{ aws_backup }}"  is empty. Proceeding.'
  when: find_matches is defined and filesFound.matched == 0

- name: Remove AWS Backup directory
  file:
    path: "{{ aws_backup }}"
    state: absent
  when: find_matches is defined and filesFound.matched == 0

- name: Create JIRA DB
  mysql_db:
    state: present
    name: "{{ jira_db_name }}"
    login_host: "{{ jira_db_endpoint }}"
    login_user: "{{ db_master_user }}"
    login_password: "{{ db_master_password }}"
    collation: utf8_bin
    encoding: utf8

- name: Create MySQL JIRA User
  mysql_user:
    user: "{{ jira_user }}"
    password: "{{ jira_admin_password }}"
    host: "%"
    login_host: "{{ jira_db_endpoint }}"
    login_user: "{{ db_master_user }}"
    login_password: "{{ db_master_password }}"
    priv: "{{ jira_db_name }}.*:{{ jira_db_grants }}"
    update_password: always
    state: present

- name: Update dbconfig.xml file
  template:
    src: dbconfig.xml.j2
    dest: "{{ jira_home }}/dbconfig.xml"
    owner: "{{ jira_user }}"
    group: "{{ jira_group }}"
    mode: 0644

- name: Apply JIRA server.xml template
  template:
    src: "server-{{ jira_version }}.xml.j2"
    dest: "{{ jira_user_home_dir }}/{{ jira_filename }}-{{ jira_version }}-standalone/conf/server.xml"
    owner: "{{ jira_user }}"
    group: "{{ jira_group }}"
    mode: 0755

- name: Create JIRA systemd service script
  template:
    src: jira.service.j2
    dest: /usr/lib/systemd/system/jira.service
    mode: 0644