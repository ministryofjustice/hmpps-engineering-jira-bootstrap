# Check EFS for AWS Backup directory
# Moves files into place
# Remove AWS Backup directory

- name: "Find AWS Backup directory"
  find:
    paths: "{{ jira_home }}"
    recurse: no
    file_type: directory
    use_regex: no
    patterns: "aws-backup-restore_*"
  register: aws_bkup_dir

- name: Move files in back up to JIRA_HOME
  block:
    - name: "Print the path of first result (only)"
      debug:
        var: aws_bkup_dir.files[0].path

    - name: "Set path to AWS Backup directory"
      set_fact: aws_backup="{{ aws_bkup_dir.files[0].path }}"

    - name: Remove unrequired files from backup
      file:
        path: "{{ aws_backup }}/{{ item }}"
        state: absent
      loop:
        - dbconfig.xml
        - .jira-home.lock

    - name: Move back up to JIRA_HOME
      become: yes
      shell: "/usr/bin/mv --no-clobber {{ aws_backup }}/* {{ jira_home }}/"
      args:
        chdir: "{{ jira_home }}"
  when: aws_bkup_dir.matched > 0

- name: Remove AWS Backup directory
  block:
    - name: Check if AWS Backup directory is empty before proceeding
      find:
        paths: "{{ aws_backup }}/"
        hidden: true
      register: files_found

    - name: Display details of files in AWS Backup directory
      debug:
        var: files_found

    - debug:
        msg: 'The AWS Backup directory "{{ aws_backup }}" not empty.'
      when: files_found.matched > 0

    - debug:
        msg: 'The AWS Backup directory "{{ aws_backup }}"  is empty. Proceeding.'
      when: files_found.matched == 0

    - name: Remove empty AWS Backup directory
      file:
        path: "{{ aws_backup }}"
        state: absent
      when: files_found.matched == 0
  when: aws_backup is defined