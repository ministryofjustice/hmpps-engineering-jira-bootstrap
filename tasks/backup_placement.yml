# Check EFS for AWS Backup directory
# Moves files into place
# Remove AWS Backup directory
-
- name: "Find AWS Backup directory"
  find:
    paths: "{{ jira_home }}"
    recurse: no
    file_type: directory
    use_regex: no
    patterns: "aws-backup-restore_*"
  register: aws_bkup_dir

- name: "Print the path of first result (only)"
  debug:
    var: aws_bkup_dir.files[0].path
  when: aws_bkup_dir.files is defined

- name: "Set path to AWS Backup directory"
  set_fact: aws_backup="{{ aws_bkup_dir.files[0].path }}"
  when: aws_bkup_dir is defined

- name: "Check for dbconfig.xml in AWS Backup directory"
  stat:
    path: "{{ aws_backup }}/dbconfig.xml"
  register: dbconfig_file
  when: aws_bkup_dir is defined

- name: Move back up to JIRA_HOME
  become: yes
  shell: "/usr/bin/mv --no-clobber {{ aws_backup }}/* {{ jira_home }}/"
  args:
    chdir: "{{ jira_home }}"
  when: aws_bkup_dir is defined and dbconfig_file is defined and dbconfig_file.stat.exists

#- name: ensure file exists to test next step
#  copy:
#    content: ""
#    dest: "{{ aws_backup }}/stopfile"
#    force: no
#    owner: "{{ jira_user }}"
#    group: "{{ jira_group }}"
#    mode: 0755

- name: Check if AWS Backup directory is empty before proceeding
  find:
    paths: "{{ aws_backup }}/"
    hidden: true
  register: files_found
  when: aws_bkup_dir is defined

- name: Display details of files in AWS Backup directory
  debug:
    var: files_found
  when: aws_bkup_dir is defined

- debug:
    msg: 'The AWS Backup directory "{{ aws_backup }}" not empty.'
  when: files_found.matched > 0

- debug:
    msg: 'The AWS Backup directory "{{ aws_backup }}"  is empty. Proceeding.'
  when: aws_bkup_dir is defined and files_found.matched == 0

- name: Remove empty AWS Backup directory
  file:
    path: "{{ aws_backup }}"
    state: absent
  when: aws_bkup_dir is defined and files_found.matched == 0